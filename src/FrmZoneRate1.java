/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;
import org.jdatepicker.impl.SqlDateModel;
import org.jdatepicker.impl.UtilCalendarModel;
import org.jdatepicker.impl.UtilDateModel;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.Barcode128;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author saini1
 */
public class FrmZoneRate1 extends javax.swing.JFrame {
    
    
      private static String FILE = "d:/simran/FirstPdf.pdf";
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);

private JDatePickerImpl datePicker;
    JDatePanelImpl datePanel ;
     UtilDateModel model1;
     Properties p;
    /**
     * Creates new form FrmZoneRate
     */
    public FrmZoneRate1() {
        
        
       model1 = new UtilDateModel();
 p = new Properties();
p.put("text.today", "Today");
p.put("text.month", "Month");
p.put("text.year", "Year");
 datePanel = new JDatePanelImpl(model1, p);
  datePicker = new JDatePickerImpl(datePanel, new DateLabelFormatter());
 datePicker.setBounds(150,50,150,30);
 add(datePicker);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtZoneA = new javax.swing.JTextField();
        cmbWeightGrp = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtZoneB = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtZoneC = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtZoneD = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtZoneE = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtZoneF = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtZoneG = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtZoneH = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtZoneI = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtZoneJ = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtZoneK = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtZoneL = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtZoneM = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        cmbClientName = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("ClientName");

        jLabel2.setText("Date ");

        jLabel3.setText("Weigth Group");

        cmbWeightGrp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Rate Zone A");

        jLabel5.setText("Rate ZoneB");

        jLabel6.setText("Rate ZoneC");

        jLabel7.setText("Rate ZoneD");

        jLabel8.setText("Rate ZoneE");

        jLabel9.setText("Rate ZoneF");

        jLabel10.setText("Rate ZoneG");

        jLabel11.setText("Rate ZoneH");

        jLabel12.setText("Rate ZoneI");

        jLabel13.setText("Rate ZoneJ");

        jLabel14.setText("Rate ZoneK");

        jLabel15.setText("Rate ZoneL");

        jLabel16.setText("Rate ZoneM");

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        cmbClientName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbClientName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbClientNameActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Export to pdf");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(cmbWeightGrp, javax.swing.GroupLayout.Alignment.LEADING, 0, 262, Short.MAX_VALUE)
                                .addComponent(cmbClientName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txtZoneA, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(txtZoneE, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(txtZoneD, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(txtZoneC, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(txtZoneB, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtZoneH, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtZoneG, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtZoneF, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel12)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtZoneI, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtZoneK, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtZoneJ, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel15)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtZoneL, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel16)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtZoneM, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(3, 3, 3)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1050, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSubmit)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(1049, 1049, 1049))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbClientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cmbWeightGrp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtZoneA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(txtZoneB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtZoneC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtZoneD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtZoneE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtZoneF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtZoneG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtZoneH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtZoneI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtZoneJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtZoneK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtZoneL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtZoneM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubmit)
                    .addComponent(btnNew)
                    .addComponent(jButton1))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void fillZoneRate()
    {
           try
        {
    Connection con=OracleConnection.getConnection();
    Statement stmt=con.createStatement();  
//step4 execute query  
Vector<String> columnNames = new Vector<String>();
ResultSet rs=stmt.executeQuery("select * from ZoneRates");  
// String[] columnNames = {"ZoneId","Country", "Zone"};
 
  if (rs != null) {
        ResultSetMetaData columns = rs.getMetaData();
        int i = 0;
        while (i < columns.getColumnCount()) {
          i++;
        //  System.out.print(columns.getColumnName(i) + "\t");
          columnNames.add(columns.getColumnName(i));
        }
        System.out.print("\n");
  }
  DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(columnNames);
        jTable1.setModel(model);
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setFillsViewportHeight(true);
        int ZoneRateId;
        String WeightGroup;
        String ZoneA,ZoneB,ZoneC,ZoneD,ZoneE,ZoneF,ZoneG,ZoneH,ZoneI,ZoneJ,ZoneK,ZoneL,ZoneM;
        int ClientId;
        String RateDate;
        while(rs.next()) 
        {
           ZoneRateId = rs.getInt("ZoneRateId");
                WeightGroup = rs.getString("WEIGHTGROUP");
               ZoneA = rs.getString("ZoneA");
                ZoneB = rs.getString("ZoneB");
                ZoneC = rs.getString("ZoneC");
                ZoneD = rs.getString("ZoneD");
                ZoneE = rs.getString("ZoneE");
                ZoneF = rs.getString("ZoneF");
                ZoneG = rs.getString("ZoneG");
                ZoneH = rs.getString("ZoneH");
                ZoneI = rs.getString("ZoneI");
                ZoneJ = rs.getString("ZoneJ");
                ZoneK = rs.getString("ZoneK");
                ZoneL = rs.getString("ZoneL");
                ZoneM = rs.getString("ZoneM");
                ClientId = rs.getInt("ClientID");
                RateDate = rs.getString("RateDate");
               model.addRow(new Object[]{ZoneRateId,WeightGroup,ZoneA,ZoneB,ZoneC,ZoneD,ZoneE,ZoneF,ZoneG,ZoneH,ZoneI,ZoneJ,ZoneK,ZoneL,ZoneM,ClientId,RateDate});
        
        }
    }
    catch(Exception e){ System.out.println(e);}       
    }
    void FillClients()
    {
       try
        {
    Connection con=OracleConnection.getConnection();
    Statement stmt=con.createStatement();  
//step4 execute query  
     ResultSet rs=stmt.executeQuery("select * from Client order by FirmName");  
     cmbClientName.removeAllItems();
     cmbClientName.addItem("Select Clients");
     while(rs.next())
     {
         String FirmName= rs.getString("FirmName");
     cmbClientName.addItem(FirmName);
     }
     
    }
   
    catch(Exception e){ System.out.println(e);}       
    } 
    
    
    
         public void createPdf(String dest) throws DocumentException {
             
         try
         {
        
        Font smallfont = new Font(FontFamily.HELVETICA, 10);
        Document document = new Document(PageSize.A4, 5, 5, 5, 5);
        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(dest));
        document.open();
        //PdfPTable table = new PdfPTable(2);
        
        PdfContentByte cb = writer.getDirectContent();
       Connection con=OracleConnection.getConnection();
    Statement stmt=con.createStatement();  
//step4 execute query  
Vector<String> columnNames = new Vector<String>();
ResultSet rs=stmt.executeQuery("select * from ZoneRates");  
// String[] columnNames = {"ZoneId","Country", "Zone"};
 
  if (rs != null) {
        ResultSetMetaData columns = rs.getMetaData();
    
  
      PdfPTable table = new PdfPTable(columns.getColumnCount());
       table.setTotalWidth(PageSize.A4.getWidth());
        table.setLockedWidth(true);
      int k=1;
      while(k<=columns.getColumnCount())
      {
        PdfPCell c1 = new PdfPCell(new Phrase(columns.getColumnName(k)));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        k++;
      }
    
        table.setHeaderRows(1); 
          int ZoneRateId;
        String WeightGroup;
        String ZoneA,ZoneB,ZoneC,ZoneD,ZoneE,ZoneF,ZoneG,ZoneH,ZoneI,ZoneJ,ZoneK,ZoneL,ZoneM;
        int ClientId;
        String RateDate;
        while(rs.next()) 
        {
           ZoneRateId = rs.getInt("ZoneRateId");
                WeightGroup = rs.getString("WEIGHTGROUP");
               ZoneA = rs.getString("ZoneA");
                ZoneB = rs.getString("ZoneB");
                ZoneC = rs.getString("ZoneC");
                ZoneD = rs.getString("ZoneD");
                ZoneE = rs.getString("ZoneE");
                ZoneF = rs.getString("ZoneF");
                ZoneG = rs.getString("ZoneG");
                ZoneH = rs.getString("ZoneH");
                ZoneI = rs.getString("ZoneI");
                ZoneJ = rs.getString("ZoneJ");
                ZoneK = rs.getString("ZoneK");
                ZoneL = rs.getString("ZoneL");
                ZoneM = rs.getString("ZoneM");
                ClientId = rs.getInt("ClientID");
                RateDate = rs.getString("RateDate");
                
        table.addCell(String.valueOf(ZoneRateId));
        table.addCell(String.valueOf(WeightGroup));
        table.addCell(String.valueOf(ZoneA));
        table.addCell(String.valueOf(ZoneB));
        table.addCell(String.valueOf(ZoneC));
        table.addCell(String.valueOf(ZoneD));
        table.addCell(String.valueOf(ZoneE));
        table.addCell(String.valueOf(ZoneF));
        table.addCell(String.valueOf(ZoneG));        
        table.addCell(String.valueOf(ZoneH));
        table.addCell(String.valueOf(ZoneI));
        table.addCell(String.valueOf(ZoneJ));
        table.addCell(String.valueOf(ZoneK));
        table.addCell(String.valueOf(ZoneL));
        table.addCell(String.valueOf(ZoneM));
        table.addCell(String.valueOf(ClientId));
        table.addCell(String.valueOf(RateDate));
        }
        Paragraph subPara = new Paragraph("From", subFont);
        String Client="ADL WorldWide";
        String Address="21 New Ram Nagar Panipat";
        String Email="sushilsaini04@gmail.com";
        String Phone="(9896470047";
        subPara.add(new Paragraph(Client));
        subPara.add(new Paragraph(Address));
        subPara.add(new Paragraph(Email));
        subPara.add(new Paragraph(Phone));
        Paragraph subParaTo = new Paragraph("To", subFont);
        String Client1="Saini Technologies";
        String Address1="21 New Ram Nagar Panipat";
        String Email1="sushilsaini04@gmail.com";
        String Phone1="(9896470047";
        subParaTo.add(new Paragraph(Client));
        subParaTo.add(new Paragraph(Address));
        subParaTo.add(new Paragraph(Email));
        subParaTo.add(new Paragraph(Phone));
         document.add(subPara);
         document.add(subParaTo);
         document.add(table);
        document.close();
  }
         }
          catch(Exception e){ System.out.println(e);}   
    }
 
    void FillWeightGroup()
    {
       try
        {
    Connection con=OracleConnection.getConnection();
    Statement stmt=con.createStatement();  
//step4 execute query  
     ResultSet rs=stmt.executeQuery("select * from WeightGroup order by GroupId");  
     cmbWeightGrp.removeAllItems();
     cmbWeightGrp.addItem("Select Weight Group");
     while(rs.next())
     {
         String WeightGrp= rs.getString("WEIGHT");
     cmbWeightGrp.addItem(WeightGrp);
     }
     
    }
   
    catch(Exception e){ System.out.println(e);}       
    } 
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        FillWeightGroup();
        fillZoneRate();
    }//GEN-LAST:event_btnNewActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        FillWeightGroup();
        FillClients();
    }//GEN-LAST:event_formWindowOpened

     int GetZoneRateId()
    {
        int zone=1;
         try{  
//step1 load the driver class  
Class.forName("oracle.jdbc.driver.OracleDriver");  
  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(  
"jdbc:oracle:thin:@localhost:1521:xe","simran","12345");  
//step3 create the statement object  
Statement stmt=con.createStatement();  
//step4 execute query  
ResultSet rs=stmt.executeQuery("select * from ZoneRates order by ZoneRateId  Desc");  
if(rs.next()) 
{
    zone = rs.getInt("ZoneRateId");
     zone=zone+1;
}
    }
    catch(Exception e){ System.out.println(e);}       
         
         return(zone);
    }  
    
    int getClientID(String ClientName)
    {
        int cid=0;
    try{  
//step1 load the driver class  
Class.forName("oracle.jdbc.driver.OracleDriver");  
  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(  
"jdbc:oracle:thin:@localhost:1521:xe","simran","12345");  
//step3 create the statement object  
Statement stmt=con.createStatement();  
//step4 execute query  
ResultSet rs=stmt.executeQuery("select ClientId from Client where FirmName ='"+ClientName+"'");  
if(rs.next()) 
{
    cid = rs.getInt("ClientId");
     
}
    }
    catch(Exception e){ System.out.println(e);}       
         
         return(cid);
    }
    boolean CheckZoneRate(int ClientId, String WeigthGrp, Date GrpRateDate)
    {
        boolean found=false;
         try{  
      Connection con=OracleConnection.getConnection();
      Statement stmt=con.createStatement();  
     ResultSet rs=stmt.executeQuery("select * from ZoneRates where CLientId ="+ClientId+" and WeightGroup ='"+WeigthGrp+"' and TO_CHAR(RateDate,'YYYY-MM-DD')='"+GrpRateDate+"'");  
     if(rs.next())
     {
     found= true;
     }
         }
     catch(Exception e){ System.out.println(e);} 
          System.out.println("Entry Found "+found);
   return(found);
    }
    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        try{  
            Connection con=OracleConnection.getConnection();
        int ZoneRateId =GetZoneRateId() ;
       String WeightGroup= cmbWeightGrp.getSelectedItem().toString();
        String ZoneA,ZoneB,ZoneC,ZoneD,ZoneE,ZoneF,ZoneG,ZoneH,ZoneI,ZoneJ,ZoneK,ZoneL,ZoneM;
        int ClientId =getClientID(cmbClientName.getSelectedItem().toString());
        Date jStartDate =  (Date) datePicker.getModel().getValue() ; //your "java" date object
        java.sql.Date startDate = new java.sql.Date(jStartDate.getTime());
        System.out.println(startDate);
       if(!CheckZoneRate(ClientId,WeightGroup, startDate))
       {
        ZoneA= txtZoneA.getText();
        ZoneB= txtZoneB.getText();
        ZoneC= txtZoneC.getText();
        ZoneD= txtZoneD.getText();
        ZoneE= txtZoneE.getText();
        ZoneF= txtZoneF.getText();
        ZoneG= txtZoneG.getText();
        ZoneH= txtZoneH.getText();
        ZoneI= txtZoneI.getText();
        ZoneJ= txtZoneJ.getText();
        ZoneK= txtZoneK.getText();
        ZoneL= txtZoneL.getText();
        ZoneM= txtZoneM.getText();
  if(con!=null)
  {
PreparedStatement stmt=con.prepareStatement("Insert into ZoneRates values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");  
stmt.setInt(1,ZoneRateId);//1 specifies the first parameter in the query  
stmt.setString(2,WeightGroup);  
stmt.setString(3,ZoneA);    
stmt.setString(4,ZoneB);    
stmt.setString(5,ZoneC);    
stmt.setString(6,ZoneD);    
stmt.setString(7,ZoneE);    
stmt.setString(8,ZoneF);    
stmt.setString(9,ZoneG);    
stmt.setString(10,ZoneH);    
stmt.setString(11,ZoneI);    
stmt.setString(12,ZoneJ);    
stmt.setString(13,ZoneK);    
stmt.setString(14,ZoneL);    
stmt.setString(15,ZoneM);    
stmt.setInt(16,ClientId);    
stmt.setDate(17,startDate);    

int i=stmt.executeUpdate();  
if(i>0)
JOptionPane.showMessageDialog(rootPane,"Zone Rate Add Sucessfully");
   fillZoneRate();
}
else
JOptionPane.showMessageDialog(rootPane,"Zone Already Exists");    
       }
       else
           JOptionPane.showMessageDialog(rootPane,"Zone Rate Allready Exist");    
           }catch(Exception e){ System.out.println(e);}  
        
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        DefaultTableModel model=(DefaultTableModel)jTable1.getModel();
        int selectedRow=jTable1.getSelectedRow();
        String client="";
        int id=Integer.parseInt(model.getValueAt(selectedRow,15).toString());
        String zoneId=model.getValueAt(selectedRow,0).toString();
         Date jStartDate =  (Date) datePicker.getModel().getValue() ; //your "java" date object
        java.sql.Date date = new java.sql.Date(jStartDate.getTime());
        try
        {
        Connection con=OracleConnection.getConnection();
        Statement stmt=con.createStatement();   
        ResultSet rs=stmt.executeQuery("select firmname from Client where clientid="+id+""); 
   
     if(rs.next())
     {
     client=rs.getString("firmname");
     }
        }
        catch(Exception e)
        {
        System.out.println(e);
        }
       
      try
      {
       Connection con=OracleConnection.getConnection();
       Statement stmt=con.createStatement();
       ResultSet rs=stmt.executeQuery("select ratedate from zonerates where zonerateid='"+zoneId+"'");
       if(rs.next())
       {
       date = rs.getDate("ratedate");
       }
          model1.setValue(date);
//datePicker.setValue(deadlineDatePrompt.toLocalDate());
      }
      catch(Exception e)
      {
      System.out.println(e);
      }
        cmbClientName.setSelectedItem(client);
        cmbWeightGrp.setSelectedItem(model.getValueAt(selectedRow,1).toString());
        txtZoneA.setText(model.getValueAt(selectedRow,2).toString());
        txtZoneB.setText(model.getValueAt(selectedRow,3).toString());
        txtZoneC.setText(model.getValueAt(selectedRow,4).toString());
        txtZoneD.setText(model.getValueAt(selectedRow,5).toString());
        txtZoneE.setText(model.getValueAt(selectedRow,6).toString());
        txtZoneF.setText(model.getValueAt(selectedRow,7).toString());
        txtZoneG.setText(model.getValueAt(selectedRow,8).toString());
        txtZoneH.setText(model.getValueAt(selectedRow,9).toString());
        txtZoneI.setText(model.getValueAt(selectedRow,10).toString());
        txtZoneJ.setText(model.getValueAt(selectedRow,11).toString());
        txtZoneK.setText(model.getValueAt(selectedRow,12).toString());
        txtZoneL.setText(model.getValueAt(selectedRow,13).toString());
        txtZoneM.setText(model.getValueAt(selectedRow,14).toString());
    }//GEN-LAST:event_jTable1MouseClicked

    private void cmbClientNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbClientNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbClientNameActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
          try {
              // TODO add your handling code here:
              
              createPdf(FILE);
          } catch (DocumentException ex) {
              Logger.getLogger(FrmZoneRate1.class.getName()).log(Level.SEVERE, null, ex);
          }
          
    }//GEN-LAST:event_jButton1ActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmZoneRate1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmZoneRate1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmZoneRate1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmZoneRate1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmZoneRate1().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> cmbClientName;
    private javax.swing.JComboBox<String> cmbWeightGrp;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtZoneA;
    private javax.swing.JTextField txtZoneB;
    private javax.swing.JTextField txtZoneC;
    private javax.swing.JTextField txtZoneD;
    private javax.swing.JTextField txtZoneE;
    private javax.swing.JTextField txtZoneF;
    private javax.swing.JTextField txtZoneG;
    private javax.swing.JTextField txtZoneH;
    private javax.swing.JTextField txtZoneI;
    private javax.swing.JTextField txtZoneJ;
    private javax.swing.JTextField txtZoneK;
    private javax.swing.JTextField txtZoneL;
    private javax.swing.JTextField txtZoneM;
    // End of variables declaration//GEN-END:variables
}
